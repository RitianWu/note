<?php

//给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。
//
//不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。
//
//元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。
//
//示例 1:
//
//给定 nums = [3,2,2,3], val = 3,
//
//函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。
//
//你不需要考虑数组中超出新长度后面的元素。
//示例 2:
//
//给定 nums = [0,1,2,2,3,0,4,2], val = 2,
//
//函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。
//
//注意这五个元素可为任意顺序。
//
//你不需要考虑数组中超出新长度后面的元素。
//说明:
//
//为什么返回数值是整数，但输出的答案是数组呢?
//
//请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。
//
//你可以想象内部操作如下:
//
//// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝
//int len = removeElement(nums, val);
//
//// 在函数里修改输入数组对于调用者是可见的。
//// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。
//for (int i = 0; i < len; i++) {
//    print(nums[i]);
//}
//
//来源：力扣（LeetCode）
//链接：https://leetcode-cn.com/problems/remove-element
//著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

// 思考
// 显然可以使用双指针来实现O(1)空间复杂度完成这个问题
// 题外思考:
// 当需要修改的元素很少:  [0, 1, 2, 3, 4, 5] 中的 0, 最好是不需要移动后边的大部分元素, 因为题目中奖说了, [元素的顺序可以变更]

class Solution
{

    /**
     * 空间复杂度 O(1)
     * 时间复杂度 O(n) 需要一次遍历数组
     * @param Integer[] $nums
     * @param Integer $val
     * @return Integer
     */
    function removeElement1(&$nums, $val)
    {
        $i = 0;
        $saveI = 0;
        $len = count($nums);
        while ($i < $len) {
            if ($val !== $nums[$i]) {
                $nums[$saveI] = $nums[$i];
                $saveI++;
            }
            $i++;
        }
        return $saveI;
    }

    /**
     * 当需要移动的元素很少时, 可以考虑将一个指针放在末尾, 重复元素与
     * 超出新长度的元素不需要考虑, 所以在这个办法中, 后几位数据不需要交换为正确的值, 只需要保证前面的值正确
     * 相对于上一种方式, 在替换元素较少时, 会减少元素移动的次数, 只移动重复的数字
     * @param $nums
     * @param $val
     * @return int
     */
    function removeElement(&$nums, $val)
    {
        $len = count($nums);
        $i = 0;
        // 为了保证 while 必须会执行一次, 进行值的替换, 当数组只有一个元素且需要删除时, 需要这样做
        $n = $len;
        while ($i < $n) {
            if ($nums[$i] === $val) {
                // 换位置后, i值未变, 下一个循环会再判断一次的
                $nums[$i] = $nums[$n - 1];
                $n--;
            } else {
                $i++;
            }
        }
        return $n;
    }
}

$nums = [0, 1, 2, 2, 3, 0, 4, 2];
$val = 2;
$s = new Solution();
var_dump($s->removeElement($nums, $val)); // 5
var_dump($nums);